// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ตารางผู้ใช้ (Users)
model User {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  email     String
  password  String
  role      Role     @default(customer)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  DriverPayment  DriverPayment[]
  AdvancePayment AdvancePayment[]

  TrafficFine TrafficFine[]
}

enum Role {
  admin
  driver
  accountant
  customer
}

// ตารางลูกค้า (Customers)
model Customer {
  id           String   @id @default(uuid()) @db.Uuid
  name         String
  contactInfo  String?
  address      String?
  pricePerTrip Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  TruckQueue TruckQueue[]

  InvoiceCustomerItem InvoiceCustomerItem[]
}

// ตารางซัพพลายเออร์ (Suppliers)
model Supplier {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  contactInfo String?
  address     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  TruckQueue      TruckQueue[]
  Product         Product[]
  InvoiceSupplier InvoiceSupplier[]
}

model Driver {
  id            String    @id @default(uuid()) @db.Uuid
  name          String
  licenseNo     String    @unique
  licenseType   String?
  licenseExpire DateTime?
  phone         String?
  birthDay      DateTime?
  workStart     DateTime?
  vehicleId     String?   @db.Uuid
  address       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  vehicle       Vehicle?  @relation(fields: [vehicleId], references: [id])

  FuelCost   FuelCost[]
  TruckQuere TruckQueue[]
  Cost       Cost[]
}

// ตารางรถและพนักงานขับรถ (Vehicles & Drivers)
model Vehicle {
  id          String   @id @default(uuid()) @db.Uuid
  plateNumber String   @unique
  model       String?
  type        String?
  capacity    Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Driver          Driver[]
  TruckQueue      TruckQueue[]
  Cost            Cost[]
  DriverPayment   DriverPayment[]
  FuelCost        FuelCost[]
  MaintenanceCost MaintenanceCost[]
}

model Cost {
  id          String     @id @default(uuid()) @db.Uuid
  vehicleId   String     @db.Uuid
  driverId    String?    @db.Uuid
  costType    String
  billNo      String?
  description String?
  amount      Float
  paymentBy   PaymentBy  @default(driver)
  status      CostStatus @default(pending)
  date        DateTime   @default(now())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  Vehicle Vehicle @relation(fields: [vehicleId], references: [id])
  Driver  Driver? @relation(fields: [driverId], references: [id])
}

// ตารางคิวการบรรทุก (Truck_Queues)
model TruckQueue {
  id         String      @id @default(uuid()) @db.Uuid
  customerId String      @db.Uuid
  vehicleId  String?     @db.Uuid
  driverId   String?     @db.Uuid
  supplierId String      @db.Uuid
  status     QueueStatus @default(pending)
  distanceKm Float?
  tripType   TripType    @default(full_delivery)
  overnight  Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  customer Customer @relation(fields: [customerId], references: [id])
  vehicle  Vehicle? @relation(fields: [vehicleId], references: [id])
  driver   Driver?  @relation(fields: [driverId], references: [id])
  supplier Supplier @relation(fields: [supplierId], references: [id])

  DriverPayment   DriverPayment[]
  InvoiceSupplier InvoiceSupplier[]
}

// ตารางต้นทุนเชื้อเพลิง (Fuel_Costs)
model FuelCost {
  id            String      @id @default(uuid()) @db.Uuid
  vehicleId     String      @db.Uuid
  fuelStation   FuelStation
  driverId      String?     @db.Uuid
  fuelType      String?
  liters        Float?
  pricePerLiter Float?
  cost          Float?
  date          DateTime    @default(now())
  createdAt     DateTime    @default(now())

  vehicle Vehicle @relation(fields: [vehicleId], references: [id])
  driver  Driver? @relation(fields: [driverId], references: [id])
}

// ตารางค่าใช้จ่ายซ่อมบำรุงรถ (Maintenance_Costs)
model MaintenanceCost {
  id              String            @id @default(uuid()) @db.Uuid
  vehicleId       String            @db.Uuid
  maintenanceDate DateTime // วันที่ซ่อม (6/1/67, 12/3/67, ...)
  maintenanceType String // ประเภทการซ่อม เช่น "ซ่อมเครื่องยนต์", "เปลี่ยนยาง" (add)
  status          MaintenanceStatus @default(pending) // สถานะการซ่อม เช่น "รอซ่อม", "ซ่อมเสร็จ" (add)
  itemName        String // รายการซ่อม เช่น "พัลมออย"
  quantity        Int? // จำนวน 
  cost            Float? // ค่าแรง/ค่าของ (ยังไม่มีในภาพ ต้องใส่ภายหลังได้)
  mileage         String? // เลขไมล์ เช่น 24/10/67
  technician      String? // ช่างที่ทำการซ่อม (add)
  remark          String? // หมายเหตุ
  createdAt       DateTime          @default(now())

  vehicle Vehicle @relation(fields: [vehicleId], references: [id])
}

// ตารางค่าขนส่งและค่าจ้างคนขับ (Driver_Payments)
model DriverPayment {
  id             String   @id @default(uuid()) @db.Uuid
  driverId       String   @db.Uuid
  queueId        String   @db.Uuid
  baseFare       Float
  overnightBonus Float    @default(0)
  deductions     Float    @default(0)
  finalPayment   Float
  createdAt      DateTime @default(now())

  driver     User       @relation(fields: [driverId], references: [id])
  truckQueue TruckQueue @relation(fields: [queueId], references: [id])
  Vehicle    Vehicle?   @relation(fields: [vehicleId], references: [id])
  vehicleId  String?    @db.Uuid
}

// ตารางการเบิกเงินล่วงหน้าของพนักงานขับรถ (Advance_Payments)
model AdvancePayment {
  id          String        @id @default(uuid()) @db.Uuid
  driverId    String        @db.Uuid
  amount      Float
  status      AdvanceStatus @default(pending)
  requestedAt DateTime      @default(now())
  approvedAt  DateTime?

  driver User @relation(fields: [driverId], references: [id])
}

// ตารางใบสั่งค่าปรับที่ต้องหักจากเงินเดือน (Traffic_Fines)
model TrafficFine {
  id                 String   @id @default(uuid()) @db.Uuid
  driverId           String   @db.Uuid
  amount             Float
  issuedDate         DateTime @default(now())
  paid               Boolean  @default(false)
  deductedFromSalary Boolean  @default(false)
  createdAt          DateTime @default(now())

  driver User @relation(fields: [driverId], references: [id])
}

// ตารางการวางบิล (Invoices)
model InvoiceCustomerItem {
  id          String   @id @default(uuid()) @db.Uuid
  customerId  String   @db.Uuid
  totalAmount Float
  dueDate     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  customer        Customer          @relation(fields: [customerId], references: [id])
  InvoiceCustomer InvoiceCustomer[]
}

model InvoiceCustomer {
  id                  String              @id @default(uuid()) @db.Uuid
  invoiceId           String              @db.Uuid
  productId           String              @db.Uuid
  quantity            Int
  weight              Float
  price               Float
  amount              Float
  InvoiceCustomerItem InvoiceCustomerItem @relation(fields: [invoiceId], references: [id])
  product             Product             @relation(fields: [productId], references: [id])
}

model InvoiceSupplier {
  id           String   @id @default(uuid()) @db.Uuid
  supplierId   String   @db.Uuid
  productId    String   @db.Uuid
  truckQueueId String   @db.Uuid
  totalAmount  Float
  cost         Float
  dueDate      DateTime
  dateIn       DateTime
  dateOut      DateTime
  weightIn     Float
  weightOut    Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  truckQueue TruckQueue @relation(fields: [truckQueueId], references: [id])
  supplier   Supplier   @relation(fields: [supplierId], references: [id])
  product    Product    @relation(fields: [productId], references: [id])
}

model Product {
  id           String    @id @default(uuid()) @db.Uuid
  name         String // ชื่อสินค้า
  category     String // ประเภทสินค้า
  costPrice    Float // ราคาต้นทุน
  sellingPrice Float // ราคาขาย
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  supplierId   String?   @db.Uuid
  supplier     Supplier? @relation(fields: [supplierId], references: [id])

  InvoiceSupplier InvoiceSupplier[]
  InvoiceCustomer InvoiceCustomer[]
}

enum AdvanceStatus {
  pending
  approved
  rejected
}

enum InvoiceStatus {
  unpaid
  paid
  overdue
}

enum QueueStatus {
  pending
  in_progress
  completed
  canceled
}

enum MaintenanceStatus {
  pending
  completed
}

enum TripType {
  full_delivery
  only_loading
}

enum CostStatus {
  pending
  completed
  canceled
}

enum PaymentBy {
  company
  driver
}

enum FuelStation {
  station_1
  station_2
}
